<?php
/**
 * MessagingStatItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MessagingStatItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagingStatItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessagingStatItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reply_rate' => 'float',
        'date' => '\DateTime',
        'delivery_rate' => 'float',
        'costs' => 'float',
        'messages_received' => 'int',
        'messages_sent_delivered' => 'int',
        'messages_sent_accepted' => 'int',
        'messages_sent_buffered' => 'int',
        'messages_sent_failed' => 'int',
        'messages_sent_rejected' => 'int',
        'messages_sent_parts' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reply_rate' => 'float',
        'date' => 'date-time',
        'delivery_rate' => 'float',
        'costs' => 'float',
        'messages_received' => null,
        'messages_sent_delivered' => null,
        'messages_sent_accepted' => null,
        'messages_sent_buffered' => null,
        'messages_sent_failed' => null,
        'messages_sent_rejected' => null,
        'messages_sent_parts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reply_rate' => 'replyRate',
        'date' => 'date',
        'delivery_rate' => 'deliveryRate',
        'costs' => 'costs',
        'messages_received' => 'messagesReceived',
        'messages_sent_delivered' => 'messagesSentDelivered',
        'messages_sent_accepted' => 'messagesSentAccepted',
        'messages_sent_buffered' => 'messagesSentBuffered',
        'messages_sent_failed' => 'messagesSentFailed',
        'messages_sent_rejected' => 'messagesSentRejected',
        'messages_sent_parts' => 'messagesSentParts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reply_rate' => 'setReplyRate',
        'date' => 'setDate',
        'delivery_rate' => 'setDeliveryRate',
        'costs' => 'setCosts',
        'messages_received' => 'setMessagesReceived',
        'messages_sent_delivered' => 'setMessagesSentDelivered',
        'messages_sent_accepted' => 'setMessagesSentAccepted',
        'messages_sent_buffered' => 'setMessagesSentBuffered',
        'messages_sent_failed' => 'setMessagesSentFailed',
        'messages_sent_rejected' => 'setMessagesSentRejected',
        'messages_sent_parts' => 'setMessagesSentParts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reply_rate' => 'getReplyRate',
        'date' => 'getDate',
        'delivery_rate' => 'getDeliveryRate',
        'costs' => 'getCosts',
        'messages_received' => 'getMessagesReceived',
        'messages_sent_delivered' => 'getMessagesSentDelivered',
        'messages_sent_accepted' => 'getMessagesSentAccepted',
        'messages_sent_buffered' => 'getMessagesSentBuffered',
        'messages_sent_failed' => 'getMessagesSentFailed',
        'messages_sent_rejected' => 'getMessagesSentRejected',
        'messages_sent_parts' => 'getMessagesSentParts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reply_rate'] = isset($data['reply_rate']) ? $data['reply_rate'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['delivery_rate'] = isset($data['delivery_rate']) ? $data['delivery_rate'] : null;
        $this->container['costs'] = isset($data['costs']) ? $data['costs'] : null;
        $this->container['messages_received'] = isset($data['messages_received']) ? $data['messages_received'] : null;
        $this->container['messages_sent_delivered'] = isset($data['messages_sent_delivered']) ? $data['messages_sent_delivered'] : null;
        $this->container['messages_sent_accepted'] = isset($data['messages_sent_accepted']) ? $data['messages_sent_accepted'] : null;
        $this->container['messages_sent_buffered'] = isset($data['messages_sent_buffered']) ? $data['messages_sent_buffered'] : null;
        $this->container['messages_sent_failed'] = isset($data['messages_sent_failed']) ? $data['messages_sent_failed'] : null;
        $this->container['messages_sent_rejected'] = isset($data['messages_sent_rejected']) ? $data['messages_sent_rejected'] : null;
        $this->container['messages_sent_parts'] = isset($data['messages_sent_parts']) ? $data['messages_sent_parts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['reply_rate'] === null) {
            $invalidProperties[] = "'reply_rate' can't be null";
        }
        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        if ($this->container['delivery_rate'] === null) {
            $invalidProperties[] = "'delivery_rate' can't be null";
        }
        if ($this->container['costs'] === null) {
            $invalidProperties[] = "'costs' can't be null";
        }
        if ($this->container['messages_received'] === null) {
            $invalidProperties[] = "'messages_received' can't be null";
        }
        if ($this->container['messages_sent_delivered'] === null) {
            $invalidProperties[] = "'messages_sent_delivered' can't be null";
        }
        if ($this->container['messages_sent_accepted'] === null) {
            $invalidProperties[] = "'messages_sent_accepted' can't be null";
        }
        if ($this->container['messages_sent_buffered'] === null) {
            $invalidProperties[] = "'messages_sent_buffered' can't be null";
        }
        if ($this->container['messages_sent_failed'] === null) {
            $invalidProperties[] = "'messages_sent_failed' can't be null";
        }
        if ($this->container['messages_sent_rejected'] === null) {
            $invalidProperties[] = "'messages_sent_rejected' can't be null";
        }
        if ($this->container['messages_sent_parts'] === null) {
            $invalidProperties[] = "'messages_sent_parts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets reply_rate
     *
     * @return float
     */
    public function getReplyRate()
    {
        return $this->container['reply_rate'];
    }

    /**
     * Sets reply_rate
     *
     * @param float $reply_rate reply_rate
     *
     * @return $this
     */
    public function setReplyRate($reply_rate)
    {
        $this->container['reply_rate'] = $reply_rate;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets delivery_rate
     *
     * @return float
     */
    public function getDeliveryRate()
    {
        return $this->container['delivery_rate'];
    }

    /**
     * Sets delivery_rate
     *
     * @param float $delivery_rate delivery_rate
     *
     * @return $this
     */
    public function setDeliveryRate($delivery_rate)
    {
        $this->container['delivery_rate'] = $delivery_rate;

        return $this;
    }

    /**
     * Gets costs
     *
     * @return float
     */
    public function getCosts()
    {
        return $this->container['costs'];
    }

    /**
     * Sets costs
     *
     * @param float $costs costs
     *
     * @return $this
     */
    public function setCosts($costs)
    {
        $this->container['costs'] = $costs;

        return $this;
    }

    /**
     * Gets messages_received
     *
     * @return int
     */
    public function getMessagesReceived()
    {
        return $this->container['messages_received'];
    }

    /**
     * Sets messages_received
     *
     * @param int $messages_received messages_received
     *
     * @return $this
     */
    public function setMessagesReceived($messages_received)
    {
        $this->container['messages_received'] = $messages_received;

        return $this;
    }

    /**
     * Gets messages_sent_delivered
     *
     * @return int
     */
    public function getMessagesSentDelivered()
    {
        return $this->container['messages_sent_delivered'];
    }

    /**
     * Sets messages_sent_delivered
     *
     * @param int $messages_sent_delivered messages_sent_delivered
     *
     * @return $this
     */
    public function setMessagesSentDelivered($messages_sent_delivered)
    {
        $this->container['messages_sent_delivered'] = $messages_sent_delivered;

        return $this;
    }

    /**
     * Gets messages_sent_accepted
     *
     * @return int
     */
    public function getMessagesSentAccepted()
    {
        return $this->container['messages_sent_accepted'];
    }

    /**
     * Sets messages_sent_accepted
     *
     * @param int $messages_sent_accepted messages_sent_accepted
     *
     * @return $this
     */
    public function setMessagesSentAccepted($messages_sent_accepted)
    {
        $this->container['messages_sent_accepted'] = $messages_sent_accepted;

        return $this;
    }

    /**
     * Gets messages_sent_buffered
     *
     * @return int
     */
    public function getMessagesSentBuffered()
    {
        return $this->container['messages_sent_buffered'];
    }

    /**
     * Sets messages_sent_buffered
     *
     * @param int $messages_sent_buffered messages_sent_buffered
     *
     * @return $this
     */
    public function setMessagesSentBuffered($messages_sent_buffered)
    {
        $this->container['messages_sent_buffered'] = $messages_sent_buffered;

        return $this;
    }

    /**
     * Gets messages_sent_failed
     *
     * @return int
     */
    public function getMessagesSentFailed()
    {
        return $this->container['messages_sent_failed'];
    }

    /**
     * Sets messages_sent_failed
     *
     * @param int $messages_sent_failed messages_sent_failed
     *
     * @return $this
     */
    public function setMessagesSentFailed($messages_sent_failed)
    {
        $this->container['messages_sent_failed'] = $messages_sent_failed;

        return $this;
    }

    /**
     * Gets messages_sent_rejected
     *
     * @return int
     */
    public function getMessagesSentRejected()
    {
        return $this->container['messages_sent_rejected'];
    }

    /**
     * Sets messages_sent_rejected
     *
     * @param int $messages_sent_rejected messages_sent_rejected
     *
     * @return $this
     */
    public function setMessagesSentRejected($messages_sent_rejected)
    {
        $this->container['messages_sent_rejected'] = $messages_sent_rejected;

        return $this;
    }

    /**
     * Gets messages_sent_parts
     *
     * @return int
     */
    public function getMessagesSentParts()
    {
        return $this->container['messages_sent_parts'];
    }

    /**
     * Sets messages_sent_parts
     *
     * @param int $messages_sent_parts messages_sent_parts
     *
     * @return $this
     */
    public function setMessagesSentParts($messages_sent_parts)
    {
        $this->container['messages_sent_parts'] = $messages_sent_parts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


