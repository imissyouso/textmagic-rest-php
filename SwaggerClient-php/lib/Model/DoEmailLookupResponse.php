<?php
/**
 * DoEmailLookupResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DoEmailLookupResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DoEmailLookupResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DoEmailLookupResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'address' => 'string',
        'address_type' => 'string',
        'email_role' => 'string',
        'reason' => 'string',
        'status' => 'string',
        'deliverability' => 'string',
        'is_disposable_address' => 'bool',
        'local_part' => 'string',
        'domain_part' => 'string',
        'exchange' => 'string',
        'is_in_white_list' => 'bool',
        'is_in_black_list' => 'bool',
        'has_mx' => 'bool',
        'has_aa' => 'bool',
        'has_aaaa' => 'bool',
        'risk' => 'string',
        'preference' => 'int',
        'suggestion' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'address' => 'email',
        'address_type' => null,
        'email_role' => null,
        'reason' => null,
        'status' => null,
        'deliverability' => null,
        'is_disposable_address' => null,
        'local_part' => null,
        'domain_part' => null,
        'exchange' => null,
        'is_in_white_list' => null,
        'is_in_black_list' => null,
        'has_mx' => null,
        'has_aa' => null,
        'has_aaaa' => null,
        'risk' => null,
        'preference' => null,
        'suggestion' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'address' => 'address',
        'address_type' => 'addressType',
        'email_role' => 'emailRole',
        'reason' => 'reason',
        'status' => 'status',
        'deliverability' => 'deliverability',
        'is_disposable_address' => 'isDisposableAddress',
        'local_part' => 'localPart',
        'domain_part' => 'domainPart',
        'exchange' => 'exchange',
        'is_in_white_list' => 'isInWhiteList',
        'is_in_black_list' => 'isInBlackList',
        'has_mx' => 'hasMx',
        'has_aa' => 'hasAa',
        'has_aaaa' => 'hasAaaa',
        'risk' => 'risk',
        'preference' => 'preference',
        'suggestion' => 'suggestion'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'address' => 'setAddress',
        'address_type' => 'setAddressType',
        'email_role' => 'setEmailRole',
        'reason' => 'setReason',
        'status' => 'setStatus',
        'deliverability' => 'setDeliverability',
        'is_disposable_address' => 'setIsDisposableAddress',
        'local_part' => 'setLocalPart',
        'domain_part' => 'setDomainPart',
        'exchange' => 'setExchange',
        'is_in_white_list' => 'setIsInWhiteList',
        'is_in_black_list' => 'setIsInBlackList',
        'has_mx' => 'setHasMx',
        'has_aa' => 'setHasAa',
        'has_aaaa' => 'setHasAaaa',
        'risk' => 'setRisk',
        'preference' => 'setPreference',
        'suggestion' => 'setSuggestion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'address' => 'getAddress',
        'address_type' => 'getAddressType',
        'email_role' => 'getEmailRole',
        'reason' => 'getReason',
        'status' => 'getStatus',
        'deliverability' => 'getDeliverability',
        'is_disposable_address' => 'getIsDisposableAddress',
        'local_part' => 'getLocalPart',
        'domain_part' => 'getDomainPart',
        'exchange' => 'getExchange',
        'is_in_white_list' => 'getIsInWhiteList',
        'is_in_black_list' => 'getIsInBlackList',
        'has_mx' => 'getHasMx',
        'has_aa' => 'getHasAa',
        'has_aaaa' => 'getHasAaaa',
        'risk' => 'getRisk',
        'preference' => 'getPreference',
        'suggestion' => 'getSuggestion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_VALID = 'valid';
    const STATUS_INVALID = 'invalid';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_VALID,
            self::STATUS_INVALID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['address_type'] = isset($data['address_type']) ? $data['address_type'] : null;
        $this->container['email_role'] = isset($data['email_role']) ? $data['email_role'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['deliverability'] = isset($data['deliverability']) ? $data['deliverability'] : null;
        $this->container['is_disposable_address'] = isset($data['is_disposable_address']) ? $data['is_disposable_address'] : null;
        $this->container['local_part'] = isset($data['local_part']) ? $data['local_part'] : null;
        $this->container['domain_part'] = isset($data['domain_part']) ? $data['domain_part'] : null;
        $this->container['exchange'] = isset($data['exchange']) ? $data['exchange'] : null;
        $this->container['is_in_white_list'] = isset($data['is_in_white_list']) ? $data['is_in_white_list'] : null;
        $this->container['is_in_black_list'] = isset($data['is_in_black_list']) ? $data['is_in_black_list'] : null;
        $this->container['has_mx'] = isset($data['has_mx']) ? $data['has_mx'] : null;
        $this->container['has_aa'] = isset($data['has_aa']) ? $data['has_aa'] : null;
        $this->container['has_aaaa'] = isset($data['has_aaaa']) ? $data['has_aaaa'] : null;
        $this->container['risk'] = isset($data['risk']) ? $data['risk'] : null;
        $this->container['preference'] = isset($data['preference']) ? $data['preference'] : null;
        $this->container['suggestion'] = isset($data['suggestion']) ? $data['suggestion'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['address_type'] === null) {
            $invalidProperties[] = "'address_type' can't be null";
        }
        if ($this->container['email_role'] === null) {
            $invalidProperties[] = "'email_role' can't be null";
        }
        if ($this->container['reason'] === null) {
            $invalidProperties[] = "'reason' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['deliverability'] === null) {
            $invalidProperties[] = "'deliverability' can't be null";
        }
        if ($this->container['is_disposable_address'] === null) {
            $invalidProperties[] = "'is_disposable_address' can't be null";
        }
        if ($this->container['local_part'] === null) {
            $invalidProperties[] = "'local_part' can't be null";
        }
        if ($this->container['domain_part'] === null) {
            $invalidProperties[] = "'domain_part' can't be null";
        }
        if ($this->container['exchange'] === null) {
            $invalidProperties[] = "'exchange' can't be null";
        }
        if ($this->container['is_in_white_list'] === null) {
            $invalidProperties[] = "'is_in_white_list' can't be null";
        }
        if ($this->container['is_in_black_list'] === null) {
            $invalidProperties[] = "'is_in_black_list' can't be null";
        }
        if ($this->container['has_mx'] === null) {
            $invalidProperties[] = "'has_mx' can't be null";
        }
        if ($this->container['has_aa'] === null) {
            $invalidProperties[] = "'has_aa' can't be null";
        }
        if ($this->container['has_aaaa'] === null) {
            $invalidProperties[] = "'has_aaaa' can't be null";
        }
        if ($this->container['risk'] === null) {
            $invalidProperties[] = "'risk' can't be null";
        }
        if ($this->container['preference'] === null) {
            $invalidProperties[] = "'preference' can't be null";
        }
        if ($this->container['suggestion'] === null) {
            $invalidProperties[] = "'suggestion' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets address
     *
     * @return string
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets address_type
     *
     * @return string
     */
    public function getAddressType()
    {
        return $this->container['address_type'];
    }

    /**
     * Sets address_type
     *
     * @param string $address_type address_type
     *
     * @return $this
     */
    public function setAddressType($address_type)
    {
        $this->container['address_type'] = $address_type;

        return $this;
    }

    /**
     * Gets email_role
     *
     * @return string
     */
    public function getEmailRole()
    {
        return $this->container['email_role'];
    }

    /**
     * Sets email_role
     *
     * @param string $email_role email_role
     *
     * @return $this
     */
    public function setEmailRole($email_role)
    {
        $this->container['email_role'] = $email_role;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets deliverability
     *
     * @return string
     */
    public function getDeliverability()
    {
        return $this->container['deliverability'];
    }

    /**
     * Sets deliverability
     *
     * @param string $deliverability deliverability
     *
     * @return $this
     */
    public function setDeliverability($deliverability)
    {
        $this->container['deliverability'] = $deliverability;

        return $this;
    }

    /**
     * Gets is_disposable_address
     *
     * @return bool
     */
    public function getIsDisposableAddress()
    {
        return $this->container['is_disposable_address'];
    }

    /**
     * Sets is_disposable_address
     *
     * @param bool $is_disposable_address is_disposable_address
     *
     * @return $this
     */
    public function setIsDisposableAddress($is_disposable_address)
    {
        $this->container['is_disposable_address'] = $is_disposable_address;

        return $this;
    }

    /**
     * Gets local_part
     *
     * @return string
     */
    public function getLocalPart()
    {
        return $this->container['local_part'];
    }

    /**
     * Sets local_part
     *
     * @param string $local_part local_part
     *
     * @return $this
     */
    public function setLocalPart($local_part)
    {
        $this->container['local_part'] = $local_part;

        return $this;
    }

    /**
     * Gets domain_part
     *
     * @return string
     */
    public function getDomainPart()
    {
        return $this->container['domain_part'];
    }

    /**
     * Sets domain_part
     *
     * @param string $domain_part domain_part
     *
     * @return $this
     */
    public function setDomainPart($domain_part)
    {
        $this->container['domain_part'] = $domain_part;

        return $this;
    }

    /**
     * Gets exchange
     *
     * @return string
     */
    public function getExchange()
    {
        return $this->container['exchange'];
    }

    /**
     * Sets exchange
     *
     * @param string $exchange exchange
     *
     * @return $this
     */
    public function setExchange($exchange)
    {
        $this->container['exchange'] = $exchange;

        return $this;
    }

    /**
     * Gets is_in_white_list
     *
     * @return bool
     */
    public function getIsInWhiteList()
    {
        return $this->container['is_in_white_list'];
    }

    /**
     * Sets is_in_white_list
     *
     * @param bool $is_in_white_list is_in_white_list
     *
     * @return $this
     */
    public function setIsInWhiteList($is_in_white_list)
    {
        $this->container['is_in_white_list'] = $is_in_white_list;

        return $this;
    }

    /**
     * Gets is_in_black_list
     *
     * @return bool
     */
    public function getIsInBlackList()
    {
        return $this->container['is_in_black_list'];
    }

    /**
     * Sets is_in_black_list
     *
     * @param bool $is_in_black_list is_in_black_list
     *
     * @return $this
     */
    public function setIsInBlackList($is_in_black_list)
    {
        $this->container['is_in_black_list'] = $is_in_black_list;

        return $this;
    }

    /**
     * Gets has_mx
     *
     * @return bool
     */
    public function getHasMx()
    {
        return $this->container['has_mx'];
    }

    /**
     * Sets has_mx
     *
     * @param bool $has_mx has_mx
     *
     * @return $this
     */
    public function setHasMx($has_mx)
    {
        $this->container['has_mx'] = $has_mx;

        return $this;
    }

    /**
     * Gets has_aa
     *
     * @return bool
     */
    public function getHasAa()
    {
        return $this->container['has_aa'];
    }

    /**
     * Sets has_aa
     *
     * @param bool $has_aa has_aa
     *
     * @return $this
     */
    public function setHasAa($has_aa)
    {
        $this->container['has_aa'] = $has_aa;

        return $this;
    }

    /**
     * Gets has_aaaa
     *
     * @return bool
     */
    public function getHasAaaa()
    {
        return $this->container['has_aaaa'];
    }

    /**
     * Sets has_aaaa
     *
     * @param bool $has_aaaa has_aaaa
     *
     * @return $this
     */
    public function setHasAaaa($has_aaaa)
    {
        $this->container['has_aaaa'] = $has_aaaa;

        return $this;
    }

    /**
     * Gets risk
     *
     * @return string
     */
    public function getRisk()
    {
        return $this->container['risk'];
    }

    /**
     * Sets risk
     *
     * @param string $risk risk
     *
     * @return $this
     */
    public function setRisk($risk)
    {
        $this->container['risk'] = $risk;

        return $this;
    }

    /**
     * Gets preference
     *
     * @return int
     */
    public function getPreference()
    {
        return $this->container['preference'];
    }

    /**
     * Sets preference
     *
     * @param int $preference preference
     *
     * @return $this
     */
    public function setPreference($preference)
    {
        $this->container['preference'] = $preference;

        return $this;
    }

    /**
     * Gets suggestion
     *
     * @return string
     */
    public function getSuggestion()
    {
        return $this->container['suggestion'];
    }

    /**
     * Sets suggestion
     *
     * @param string $suggestion suggestion
     *
     * @return $this
     */
    public function setSuggestion($suggestion)
    {
        $this->container['suggestion'] = $suggestion;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


