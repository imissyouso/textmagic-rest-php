<?php
/**
 * GetInboundMessagesNotificationSettingsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetInboundMessagesNotificationSettingsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetInboundMessagesNotificationSettingsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetInboundMessagesNotificationSettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'inbound_message_notification' => 'bool',
        'forwarded_call_notification' => 'bool',
        'include_sms_history' => 'bool',
        'send_in_html_format' => 'bool',
        'alert_email1' => 'string',
        'alert_email2' => 'string',
        'alert_email3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'inbound_message_notification' => null,
        'forwarded_call_notification' => null,
        'include_sms_history' => null,
        'send_in_html_format' => null,
        'alert_email1' => null,
        'alert_email2' => null,
        'alert_email3' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'inbound_message_notification' => 'inboundMessageNotification',
        'forwarded_call_notification' => 'forwardedCallNotification',
        'include_sms_history' => 'includeSmsHistory',
        'send_in_html_format' => 'sendInHtmlFormat',
        'alert_email1' => 'alertEmail1',
        'alert_email2' => 'alertEmail2',
        'alert_email3' => 'alertEmail3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'inbound_message_notification' => 'setInboundMessageNotification',
        'forwarded_call_notification' => 'setForwardedCallNotification',
        'include_sms_history' => 'setIncludeSmsHistory',
        'send_in_html_format' => 'setSendInHtmlFormat',
        'alert_email1' => 'setAlertEmail1',
        'alert_email2' => 'setAlertEmail2',
        'alert_email3' => 'setAlertEmail3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'inbound_message_notification' => 'getInboundMessageNotification',
        'forwarded_call_notification' => 'getForwardedCallNotification',
        'include_sms_history' => 'getIncludeSmsHistory',
        'send_in_html_format' => 'getSendInHtmlFormat',
        'alert_email1' => 'getAlertEmail1',
        'alert_email2' => 'getAlertEmail2',
        'alert_email3' => 'getAlertEmail3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['inbound_message_notification'] = isset($data['inbound_message_notification']) ? $data['inbound_message_notification'] : null;
        $this->container['forwarded_call_notification'] = isset($data['forwarded_call_notification']) ? $data['forwarded_call_notification'] : null;
        $this->container['include_sms_history'] = isset($data['include_sms_history']) ? $data['include_sms_history'] : null;
        $this->container['send_in_html_format'] = isset($data['send_in_html_format']) ? $data['send_in_html_format'] : null;
        $this->container['alert_email1'] = isset($data['alert_email1']) ? $data['alert_email1'] : null;
        $this->container['alert_email2'] = isset($data['alert_email2']) ? $data['alert_email2'] : null;
        $this->container['alert_email3'] = isset($data['alert_email3']) ? $data['alert_email3'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['inbound_message_notification'] === null) {
            $invalidProperties[] = "'inbound_message_notification' can't be null";
        }
        if ($this->container['forwarded_call_notification'] === null) {
            $invalidProperties[] = "'forwarded_call_notification' can't be null";
        }
        if ($this->container['include_sms_history'] === null) {
            $invalidProperties[] = "'include_sms_history' can't be null";
        }
        if ($this->container['send_in_html_format'] === null) {
            $invalidProperties[] = "'send_in_html_format' can't be null";
        }
        if ($this->container['alert_email1'] === null) {
            $invalidProperties[] = "'alert_email1' can't be null";
        }
        if ($this->container['alert_email2'] === null) {
            $invalidProperties[] = "'alert_email2' can't be null";
        }
        if ($this->container['alert_email3'] === null) {
            $invalidProperties[] = "'alert_email3' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets inbound_message_notification
     *
     * @return bool
     */
    public function getInboundMessageNotification()
    {
        return $this->container['inbound_message_notification'];
    }

    /**
     * Sets inbound_message_notification
     *
     * @param bool $inbound_message_notification Should user receive notification about new incoming messages
     *
     * @return $this
     */
    public function setInboundMessageNotification($inbound_message_notification)
    {
        $this->container['inbound_message_notification'] = $inbound_message_notification;

        return $this;
    }

    /**
     * Gets forwarded_call_notification
     *
     * @return bool
     */
    public function getForwardedCallNotification()
    {
        return $this->container['forwarded_call_notification'];
    }

    /**
     * Sets forwarded_call_notification
     *
     * @param bool $forwarded_call_notification Should user receive notification about new forwarded calls
     *
     * @return $this
     */
    public function setForwardedCallNotification($forwarded_call_notification)
    {
        $this->container['forwarded_call_notification'] = $forwarded_call_notification;

        return $this;
    }

    /**
     * Gets include_sms_history
     *
     * @return bool
     */
    public function getIncludeSmsHistory()
    {
        return $this->container['include_sms_history'];
    }

    /**
     * Sets include_sms_history
     *
     * @param bool $include_sms_history Include SMS history into notification Email
     *
     * @return $this
     */
    public function setIncludeSmsHistory($include_sms_history)
    {
        $this->container['include_sms_history'] = $include_sms_history;

        return $this;
    }

    /**
     * Gets send_in_html_format
     *
     * @return bool
     */
    public function getSendInHtmlFormat()
    {
        return $this->container['send_in_html_format'];
    }

    /**
     * Sets send_in_html_format
     *
     * @param bool $send_in_html_format Send Email notification in HTML format
     *
     * @return $this
     */
    public function setSendInHtmlFormat($send_in_html_format)
    {
        $this->container['send_in_html_format'] = $send_in_html_format;

        return $this;
    }

    /**
     * Gets alert_email1
     *
     * @return string
     */
    public function getAlertEmail1()
    {
        return $this->container['alert_email1'];
    }

    /**
     * Sets alert_email1
     *
     * @param string $alert_email1 New message notification email 2
     *
     * @return $this
     */
    public function setAlertEmail1($alert_email1)
    {
        $this->container['alert_email1'] = $alert_email1;

        return $this;
    }

    /**
     * Gets alert_email2
     *
     * @return string
     */
    public function getAlertEmail2()
    {
        return $this->container['alert_email2'];
    }

    /**
     * Sets alert_email2
     *
     * @param string $alert_email2 New message notification email 2
     *
     * @return $this
     */
    public function setAlertEmail2($alert_email2)
    {
        $this->container['alert_email2'] = $alert_email2;

        return $this;
    }

    /**
     * Gets alert_email3
     *
     * @return string
     */
    public function getAlertEmail3()
    {
        return $this->container['alert_email3'];
    }

    /**
     * Sets alert_email3
     *
     * @param string $alert_email3 New message notification email 3
     *
     * @return $this
     */
    public function setAlertEmail3($alert_email3)
    {
        $this->container['alert_email3'] = $alert_email3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


