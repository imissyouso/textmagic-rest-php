<?php
/**
 * GetBalanceNotificationSettingsResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetBalanceNotificationSettingsResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetBalanceNotificationSettingsResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetBalanceNotificationSettingsResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'low_balance_notification' => 'bool',
        'alert_balance' => 'string',
        'alert_phone' => 'string',
        'alert_email1' => 'string',
        'alert_email2' => 'string',
        'alert_email3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'low_balance_notification' => null,
        'alert_balance' => null,
        'alert_phone' => null,
        'alert_email1' => null,
        'alert_email2' => null,
        'alert_email3' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'low_balance_notification' => 'lowBalanceNotification',
        'alert_balance' => 'alertBalance',
        'alert_phone' => 'alertPhone',
        'alert_email1' => 'alertEmail1',
        'alert_email2' => 'alertEmail2',
        'alert_email3' => 'alertEmail3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'low_balance_notification' => 'setLowBalanceNotification',
        'alert_balance' => 'setAlertBalance',
        'alert_phone' => 'setAlertPhone',
        'alert_email1' => 'setAlertEmail1',
        'alert_email2' => 'setAlertEmail2',
        'alert_email3' => 'setAlertEmail3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'low_balance_notification' => 'getLowBalanceNotification',
        'alert_balance' => 'getAlertBalance',
        'alert_phone' => 'getAlertPhone',
        'alert_email1' => 'getAlertEmail1',
        'alert_email2' => 'getAlertEmail2',
        'alert_email3' => 'getAlertEmail3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['low_balance_notification'] = isset($data['low_balance_notification']) ? $data['low_balance_notification'] : null;
        $this->container['alert_balance'] = isset($data['alert_balance']) ? $data['alert_balance'] : null;
        $this->container['alert_phone'] = isset($data['alert_phone']) ? $data['alert_phone'] : null;
        $this->container['alert_email1'] = isset($data['alert_email1']) ? $data['alert_email1'] : null;
        $this->container['alert_email2'] = isset($data['alert_email2']) ? $data['alert_email2'] : null;
        $this->container['alert_email3'] = isset($data['alert_email3']) ? $data['alert_email3'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['low_balance_notification'] === null) {
            $invalidProperties[] = "'low_balance_notification' can't be null";
        }
        if ($this->container['alert_balance'] === null) {
            $invalidProperties[] = "'alert_balance' can't be null";
        }
        if ($this->container['alert_phone'] === null) {
            $invalidProperties[] = "'alert_phone' can't be null";
        }
        if ($this->container['alert_email1'] === null) {
            $invalidProperties[] = "'alert_email1' can't be null";
        }
        if ($this->container['alert_email2'] === null) {
            $invalidProperties[] = "'alert_email2' can't be null";
        }
        if ($this->container['alert_email3'] === null) {
            $invalidProperties[] = "'alert_email3' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets low_balance_notification
     *
     * @return bool
     */
    public function getLowBalanceNotification()
    {
        return $this->container['low_balance_notification'];
    }

    /**
     * Sets low_balance_notification
     *
     * @param bool $low_balance_notification Should user receive low balance notification
     *
     * @return $this
     */
    public function setLowBalanceNotification($low_balance_notification)
    {
        $this->container['low_balance_notification'] = $low_balance_notification;

        return $this;
    }

    /**
     * Gets alert_balance
     *
     * @return string
     */
    public function getAlertBalance()
    {
        return $this->container['alert_balance'];
    }

    /**
     * Sets alert_balance
     *
     * @param string $alert_balance If balance is below this value, user receive low balance notification
     *
     * @return $this
     */
    public function setAlertBalance($alert_balance)
    {
        $this->container['alert_balance'] = $alert_balance;

        return $this;
    }

    /**
     * Gets alert_phone
     *
     * @return string
     */
    public function getAlertPhone()
    {
        return $this->container['alert_phone'];
    }

    /**
     * Sets alert_phone
     *
     * @param string $alert_phone Low balance notification phone number
     *
     * @return $this
     */
    public function setAlertPhone($alert_phone)
    {
        $this->container['alert_phone'] = $alert_phone;

        return $this;
    }

    /**
     * Gets alert_email1
     *
     * @return string
     */
    public function getAlertEmail1()
    {
        return $this->container['alert_email1'];
    }

    /**
     * Sets alert_email1
     *
     * @param string $alert_email1 Low balance notification email 1
     *
     * @return $this
     */
    public function setAlertEmail1($alert_email1)
    {
        $this->container['alert_email1'] = $alert_email1;

        return $this;
    }

    /**
     * Gets alert_email2
     *
     * @return string
     */
    public function getAlertEmail2()
    {
        return $this->container['alert_email2'];
    }

    /**
     * Sets alert_email2
     *
     * @param string $alert_email2 Low balance notification email 2
     *
     * @return $this
     */
    public function setAlertEmail2($alert_email2)
    {
        $this->container['alert_email2'] = $alert_email2;

        return $this;
    }

    /**
     * Gets alert_email3
     *
     * @return string
     */
    public function getAlertEmail3()
    {
        return $this->container['alert_email3'];
    }

    /**
     * Sets alert_email3
     *
     * @param string $alert_email3 Low balance notification email 3
     *
     * @return $this
     */
    public function setAlertEmail3($alert_email3)
    {
        $this->container['alert_email3'] = $alert_email3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


