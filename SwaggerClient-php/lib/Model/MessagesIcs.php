<?php
/**
 * MessagesIcs
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MessagesIcs Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessagesIcs implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessagesIcs';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'next_send' => '\DateTime',
        'rrule' => 'string',
        'session' => '\Swagger\Client\Model\MessageSession',
        'last_sent' => '\DateTime',
        'contact_name' => 'string',
        'parameters' => '\Swagger\Client\Model\MessagesIcsParameters',
        'type' => 'string',
        'summary' => 'string',
        'text_parameters' => '\Swagger\Client\Model\MessagesIcsTextParameters',
        'first_occurrence' => '\DateTime',
        'last_occurrence' => '\DateTime',
        'recipients_count' => 'int',
        'timezone' => 'string',
        'completed' => 'bool',
        'avatar' => 'string',
        'created_at' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'next_send' => 'date-time',
        'rrule' => null,
        'session' => null,
        'last_sent' => 'date-time',
        'contact_name' => null,
        'parameters' => null,
        'type' => null,
        'summary' => null,
        'text_parameters' => null,
        'first_occurrence' => 'date-time',
        'last_occurrence' => 'date-time',
        'recipients_count' => null,
        'timezone' => null,
        'completed' => null,
        'avatar' => null,
        'created_at' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'next_send' => 'nextSend',
        'rrule' => 'rrule',
        'session' => 'session',
        'last_sent' => 'lastSent',
        'contact_name' => 'contactName',
        'parameters' => 'parameters',
        'type' => 'type',
        'summary' => 'summary',
        'text_parameters' => 'textParameters',
        'first_occurrence' => 'firstOccurrence',
        'last_occurrence' => 'lastOccurrence',
        'recipients_count' => 'recipientsCount',
        'timezone' => 'timezone',
        'completed' => 'completed',
        'avatar' => 'avatar',
        'created_at' => 'createdAt'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'next_send' => 'setNextSend',
        'rrule' => 'setRrule',
        'session' => 'setSession',
        'last_sent' => 'setLastSent',
        'contact_name' => 'setContactName',
        'parameters' => 'setParameters',
        'type' => 'setType',
        'summary' => 'setSummary',
        'text_parameters' => 'setTextParameters',
        'first_occurrence' => 'setFirstOccurrence',
        'last_occurrence' => 'setLastOccurrence',
        'recipients_count' => 'setRecipientsCount',
        'timezone' => 'setTimezone',
        'completed' => 'setCompleted',
        'avatar' => 'setAvatar',
        'created_at' => 'setCreatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'next_send' => 'getNextSend',
        'rrule' => 'getRrule',
        'session' => 'getSession',
        'last_sent' => 'getLastSent',
        'contact_name' => 'getContactName',
        'parameters' => 'getParameters',
        'type' => 'getType',
        'summary' => 'getSummary',
        'text_parameters' => 'getTextParameters',
        'first_occurrence' => 'getFirstOccurrence',
        'last_occurrence' => 'getLastOccurrence',
        'recipients_count' => 'getRecipientsCount',
        'timezone' => 'getTimezone',
        'completed' => 'getCompleted',
        'avatar' => 'getAvatar',
        'created_at' => 'getCreatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['next_send'] = isset($data['next_send']) ? $data['next_send'] : null;
        $this->container['rrule'] = isset($data['rrule']) ? $data['rrule'] : null;
        $this->container['session'] = isset($data['session']) ? $data['session'] : null;
        $this->container['last_sent'] = isset($data['last_sent']) ? $data['last_sent'] : null;
        $this->container['contact_name'] = isset($data['contact_name']) ? $data['contact_name'] : null;
        $this->container['parameters'] = isset($data['parameters']) ? $data['parameters'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['summary'] = isset($data['summary']) ? $data['summary'] : null;
        $this->container['text_parameters'] = isset($data['text_parameters']) ? $data['text_parameters'] : null;
        $this->container['first_occurrence'] = isset($data['first_occurrence']) ? $data['first_occurrence'] : null;
        $this->container['last_occurrence'] = isset($data['last_occurrence']) ? $data['last_occurrence'] : null;
        $this->container['recipients_count'] = isset($data['recipients_count']) ? $data['recipients_count'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['completed'] = isset($data['completed']) ? $data['completed'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['next_send'] === null) {
            $invalidProperties[] = "'next_send' can't be null";
        }
        if ($this->container['rrule'] === null) {
            $invalidProperties[] = "'rrule' can't be null";
        }
        if ($this->container['session'] === null) {
            $invalidProperties[] = "'session' can't be null";
        }
        if ($this->container['last_sent'] === null) {
            $invalidProperties[] = "'last_sent' can't be null";
        }
        if ($this->container['contact_name'] === null) {
            $invalidProperties[] = "'contact_name' can't be null";
        }
        if ($this->container['parameters'] === null) {
            $invalidProperties[] = "'parameters' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['summary'] === null) {
            $invalidProperties[] = "'summary' can't be null";
        }
        if ($this->container['text_parameters'] === null) {
            $invalidProperties[] = "'text_parameters' can't be null";
        }
        if ($this->container['first_occurrence'] === null) {
            $invalidProperties[] = "'first_occurrence' can't be null";
        }
        if ($this->container['last_occurrence'] === null) {
            $invalidProperties[] = "'last_occurrence' can't be null";
        }
        if ($this->container['recipients_count'] === null) {
            $invalidProperties[] = "'recipients_count' can't be null";
        }
        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ($this->container['completed'] === null) {
            $invalidProperties[] = "'completed' can't be null";
        }
        if ($this->container['avatar'] === null) {
            $invalidProperties[] = "'avatar' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets next_send
     *
     * @return \DateTime
     */
    public function getNextSend()
    {
        return $this->container['next_send'];
    }

    /**
     * Sets next_send
     *
     * @param \DateTime $next_send next_send
     *
     * @return $this
     */
    public function setNextSend($next_send)
    {
        $this->container['next_send'] = $next_send;

        return $this;
    }

    /**
     * Gets rrule
     *
     * @return string
     */
    public function getRrule()
    {
        return $this->container['rrule'];
    }

    /**
     * Sets rrule
     *
     * @param string $rrule rrule
     *
     * @return $this
     */
    public function setRrule($rrule)
    {
        $this->container['rrule'] = $rrule;

        return $this;
    }

    /**
     * Gets session
     *
     * @return \Swagger\Client\Model\MessageSession
     */
    public function getSession()
    {
        return $this->container['session'];
    }

    /**
     * Sets session
     *
     * @param \Swagger\Client\Model\MessageSession $session session
     *
     * @return $this
     */
    public function setSession($session)
    {
        $this->container['session'] = $session;

        return $this;
    }

    /**
     * Gets last_sent
     *
     * @return \DateTime
     */
    public function getLastSent()
    {
        return $this->container['last_sent'];
    }

    /**
     * Sets last_sent
     *
     * @param \DateTime $last_sent last_sent
     *
     * @return $this
     */
    public function setLastSent($last_sent)
    {
        $this->container['last_sent'] = $last_sent;

        return $this;
    }

    /**
     * Gets contact_name
     *
     * @return string
     */
    public function getContactName()
    {
        return $this->container['contact_name'];
    }

    /**
     * Sets contact_name
     *
     * @param string $contact_name contact_name
     *
     * @return $this
     */
    public function setContactName($contact_name)
    {
        $this->container['contact_name'] = $contact_name;

        return $this;
    }

    /**
     * Gets parameters
     *
     * @return \Swagger\Client\Model\MessagesIcsParameters
     */
    public function getParameters()
    {
        return $this->container['parameters'];
    }

    /**
     * Sets parameters
     *
     * @param \Swagger\Client\Model\MessagesIcsParameters $parameters parameters
     *
     * @return $this
     */
    public function setParameters($parameters)
    {
        $this->container['parameters'] = $parameters;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets summary
     *
     * @return string
     */
    public function getSummary()
    {
        return $this->container['summary'];
    }

    /**
     * Sets summary
     *
     * @param string $summary summary
     *
     * @return $this
     */
    public function setSummary($summary)
    {
        $this->container['summary'] = $summary;

        return $this;
    }

    /**
     * Gets text_parameters
     *
     * @return \Swagger\Client\Model\MessagesIcsTextParameters
     */
    public function getTextParameters()
    {
        return $this->container['text_parameters'];
    }

    /**
     * Sets text_parameters
     *
     * @param \Swagger\Client\Model\MessagesIcsTextParameters $text_parameters text_parameters
     *
     * @return $this
     */
    public function setTextParameters($text_parameters)
    {
        $this->container['text_parameters'] = $text_parameters;

        return $this;
    }

    /**
     * Gets first_occurrence
     *
     * @return \DateTime
     */
    public function getFirstOccurrence()
    {
        return $this->container['first_occurrence'];
    }

    /**
     * Sets first_occurrence
     *
     * @param \DateTime $first_occurrence first_occurrence
     *
     * @return $this
     */
    public function setFirstOccurrence($first_occurrence)
    {
        $this->container['first_occurrence'] = $first_occurrence;

        return $this;
    }

    /**
     * Gets last_occurrence
     *
     * @return \DateTime
     */
    public function getLastOccurrence()
    {
        return $this->container['last_occurrence'];
    }

    /**
     * Sets last_occurrence
     *
     * @param \DateTime $last_occurrence last_occurrence
     *
     * @return $this
     */
    public function setLastOccurrence($last_occurrence)
    {
        $this->container['last_occurrence'] = $last_occurrence;

        return $this;
    }

    /**
     * Gets recipients_count
     *
     * @return int
     */
    public function getRecipientsCount()
    {
        return $this->container['recipients_count'];
    }

    /**
     * Sets recipients_count
     *
     * @param int $recipients_count recipients_count
     *
     * @return $this
     */
    public function setRecipientsCount($recipients_count)
    {
        $this->container['recipients_count'] = $recipients_count;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone timezone
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets completed
     *
     * @return bool
     */
    public function getCompleted()
    {
        return $this->container['completed'];
    }

    /**
     * Sets completed
     *
     * @param bool $completed completed
     *
     * @return $this
     */
    public function setCompleted($completed)
    {
        $this->container['completed'] = $completed;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at created_at
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


