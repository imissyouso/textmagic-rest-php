<?php
/**
 * SendMessageInputObject
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SendMessageInputObject Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SendMessageInputObject implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SendMessageInputObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'text' => 'string',
        'template_id' => 'int',
        'sending_time' => 'int',
        'sending_date_time' => 'string',
        'sending_timezone' => 'string',
        'contacts' => 'string',
        'lists' => 'string',
        'phones' => 'string',
        'cut_extra' => 'bool',
        'parts_count' => 'int',
        'reference_id' => 'int',
        'from' => 'string',
        'rule' => 'string',
        'create_chat' => 'bool',
        'tts' => 'bool',
        'local' => 'bool',
        'local_country' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'text' => null,
        'template_id' => null,
        'sending_time' => null,
        'sending_date_time' => null,
        'sending_timezone' => null,
        'contacts' => null,
        'lists' => null,
        'phones' => null,
        'cut_extra' => null,
        'parts_count' => null,
        'reference_id' => null,
        'from' => null,
        'rule' => null,
        'create_chat' => null,
        'tts' => null,
        'local' => null,
        'local_country' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'text' => 'text',
        'template_id' => 'templateId',
        'sending_time' => 'sendingTime',
        'sending_date_time' => 'sendingDateTime',
        'sending_timezone' => 'sendingTimezone',
        'contacts' => 'contacts',
        'lists' => 'lists',
        'phones' => 'phones',
        'cut_extra' => 'cutExtra',
        'parts_count' => 'partsCount',
        'reference_id' => 'referenceId',
        'from' => 'from',
        'rule' => 'rule',
        'create_chat' => 'createChat',
        'tts' => 'tts',
        'local' => 'local',
        'local_country' => 'localCountry'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'text' => 'setText',
        'template_id' => 'setTemplateId',
        'sending_time' => 'setSendingTime',
        'sending_date_time' => 'setSendingDateTime',
        'sending_timezone' => 'setSendingTimezone',
        'contacts' => 'setContacts',
        'lists' => 'setLists',
        'phones' => 'setPhones',
        'cut_extra' => 'setCutExtra',
        'parts_count' => 'setPartsCount',
        'reference_id' => 'setReferenceId',
        'from' => 'setFrom',
        'rule' => 'setRule',
        'create_chat' => 'setCreateChat',
        'tts' => 'setTts',
        'local' => 'setLocal',
        'local_country' => 'setLocalCountry'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'text' => 'getText',
        'template_id' => 'getTemplateId',
        'sending_time' => 'getSendingTime',
        'sending_date_time' => 'getSendingDateTime',
        'sending_timezone' => 'getSendingTimezone',
        'contacts' => 'getContacts',
        'lists' => 'getLists',
        'phones' => 'getPhones',
        'cut_extra' => 'getCutExtra',
        'parts_count' => 'getPartsCount',
        'reference_id' => 'getReferenceId',
        'from' => 'getFrom',
        'rule' => 'getRule',
        'create_chat' => 'getCreateChat',
        'tts' => 'getTts',
        'local' => 'getLocal',
        'local_country' => 'getLocalCountry'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['template_id'] = isset($data['template_id']) ? $data['template_id'] : null;
        $this->container['sending_time'] = isset($data['sending_time']) ? $data['sending_time'] : null;
        $this->container['sending_date_time'] = isset($data['sending_date_time']) ? $data['sending_date_time'] : null;
        $this->container['sending_timezone'] = isset($data['sending_timezone']) ? $data['sending_timezone'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['lists'] = isset($data['lists']) ? $data['lists'] : null;
        $this->container['phones'] = isset($data['phones']) ? $data['phones'] : null;
        $this->container['cut_extra'] = isset($data['cut_extra']) ? $data['cut_extra'] : null;
        $this->container['parts_count'] = isset($data['parts_count']) ? $data['parts_count'] : null;
        $this->container['reference_id'] = isset($data['reference_id']) ? $data['reference_id'] : null;
        $this->container['from'] = isset($data['from']) ? $data['from'] : null;
        $this->container['rule'] = isset($data['rule']) ? $data['rule'] : null;
        $this->container['create_chat'] = isset($data['create_chat']) ? $data['create_chat'] : null;
        $this->container['tts'] = isset($data['tts']) ? $data['tts'] : null;
        $this->container['local'] = isset($data['local']) ? $data['local'] : null;
        $this->container['local_country'] = isset($data['local_country']) ? $data['local_country'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text Message text. Required if template_id is not set
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return int
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param int $template_id Template used instead of message text. Required if text is not set
     *
     * @return $this
     */
    public function setTemplateId($template_id)
    {
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets sending_time
     *
     * @return int
     */
    public function getSendingTime()
    {
        return $this->container['sending_time'];
    }

    /**
     * Sets sending_time
     *
     * @param int $sending_time DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now
     *
     * @return $this
     */
    public function setSendingTime($sending_time)
    {
        $this->container['sending_time'] = $sending_time;

        return $this;
    }

    /**
     * Gets sending_date_time
     *
     * @return string
     */
    public function getSendingDateTime()
    {
        return $this->container['sending_date_time'];
    }

    /**
     * Sets sending_date_time
     *
     * @param string $sending_date_time Sending time in Y-m-d H:i:s format (e.g. 2016-05-27 13:02:33). This time is relative to sendingTimezone
     *
     * @return $this
     */
    public function setSendingDateTime($sending_date_time)
    {
        $this->container['sending_date_time'] = $sending_date_time;

        return $this;
    }

    /**
     * Gets sending_timezone
     *
     * @return string
     */
    public function getSendingTimezone()
    {
        return $this->container['sending_timezone'];
    }

    /**
     * Sets sending_timezone
     *
     * @param string $sending_timezone ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone
     *
     * @return $this
     */
    public function setSendingTimezone($sending_timezone)
    {
        $this->container['sending_timezone'] = $sending_timezone;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string $contacts Comma separated array of contact resources id message will be sent to
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets lists
     *
     * @return string
     */
    public function getLists()
    {
        return $this->container['lists'];
    }

    /**
     * Sets lists
     *
     * @param string $lists Comma separated array of list resources id message will be sent to
     *
     * @return $this
     */
    public function setLists($lists)
    {
        $this->container['lists'] = $lists;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return string
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param string $phones Comma separated array of E.164 phone numbers message will be sent to
     *
     * @return $this
     */
    public function setPhones($phones)
    {
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets cut_extra
     *
     * @return bool
     */
    public function getCutExtra()
    {
        return $this->container['cut_extra'];
    }

    /**
     * Sets cut_extra
     *
     * @param bool $cut_extra Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead. Default is false
     *
     * @return $this
     */
    public function setCutExtra($cut_extra)
    {
        $this->container['cut_extra'] = $cut_extra;

        return $this;
    }

    /**
     * Gets parts_count
     *
     * @return int
     */
    public function getPartsCount()
    {
        return $this->container['parts_count'];
    }

    /**
     * Sets parts_count
     *
     * @param int $parts_count Maximum message parts count (TextMagic allows sending 1 to 6 message parts). Default is 6
     *
     * @return $this
     */
    public function setPartsCount($parts_count)
    {
        $this->container['parts_count'] = $parts_count;

        return $this;
    }

    /**
     * Gets reference_id
     *
     * @return int
     */
    public function getReferenceId()
    {
        return $this->container['reference_id'];
    }

    /**
     * Sets reference_id
     *
     * @param int $reference_id Custom message reference id which can be used in your application infrastructure
     *
     * @return $this
     */
    public function setReferenceId($reference_id)
    {
        $this->container['reference_id'] = $reference_id;

        return $this;
    }

    /**
     * Gets from
     *
     * @return string
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string $from One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery
     *
     * @return $this
     */
    public function setFrom($from)
    {
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets rule
     *
     * @return string
     */
    public function getRule()
    {
        return $this->container['rule'];
    }

    /**
     * Sets rule
     *
     * @param string $rule iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details
     *
     * @return $this
     */
    public function setRule($rule)
    {
        $this->container['rule'] = $rule;

        return $this;
    }

    /**
     * Gets create_chat
     *
     * @return bool
     */
    public function getCreateChat()
    {
        return $this->container['create_chat'];
    }

    /**
     * Sets create_chat
     *
     * @param bool $create_chat Should sending method try to create new Chat(if not exist) with specified recipients. Default is false
     *
     * @return $this
     */
    public function setCreateChat($create_chat)
    {
        $this->container['create_chat'] = $create_chat;

        return $this;
    }

    /**
     * Gets tts
     *
     * @return bool
     */
    public function getTts()
    {
        return $this->container['tts'];
    }

    /**
     * Sets tts
     *
     * @param bool $tts Send Text to Speech message. Default is false
     *
     * @return $this
     */
    public function setTts($tts)
    {
        $this->container['tts'] = $tts;

        return $this;
    }

    /**
     * Gets local
     *
     * @return bool
     */
    public function getLocal()
    {
        return $this->container['local'];
    }

    /**
     * Sets local
     *
     * @param bool $local Treat phone numbers passed in \\'phones\\' field as local. Default is false
     *
     * @return $this
     */
    public function setLocal($local)
    {
        $this->container['local'] = $local;

        return $this;
    }

    /**
     * Gets local_country
     *
     * @return string
     */
    public function getLocalCountry()
    {
        return $this->container['local_country'];
    }

    /**
     * Sets local_country
     *
     * @param string $local_country 2-letter ISO country code for local phone numbers, used when \\'local\\' is set to true. Default is account country
     *
     * @return $this
     */
    public function setLocalCountry($local_country)
    {
        $this->container['local_country'] = $local_country;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


