<?php
/**
 * MessageOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TextMagic
 *
 * TextMagic REST API
 *
 * OpenAPI spec version: 2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.8
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MessageOut Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MessageOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MessageOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'contact_id' => 'int',
        'session_id' => 'int',
        'receiver' => 'string',
        'message_time' => '\DateTime',
        'status' => 'string',
        'avatar' => 'string',
        'text' => 'string',
        'deleted' => 'bool',
        'charset' => 'string',
        'charset_label' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'country' => 'string',
        'sender' => 'string',
        'phone' => 'string',
        'price' => 'float',
        'parts_count' => 'int',
        'from_email' => 'string',
        'from_number' => 'string',
        'smsc_id' => 'string',
        'contact' => 'string',
        'source' => 'string',
        'delivered_count' => 'int',
        'numbers_count' => 'int',
        'user_id' => 'int',
        'credits_price' => 'string',
        'chars' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'contact_id' => null,
        'session_id' => null,
        'receiver' => null,
        'message_time' => 'date-time',
        'status' => null,
        'avatar' => null,
        'text' => null,
        'deleted' => null,
        'charset' => null,
        'charset_label' => null,
        'first_name' => null,
        'last_name' => null,
        'country' => null,
        'sender' => null,
        'phone' => null,
        'price' => 'float',
        'parts_count' => null,
        'from_email' => null,
        'from_number' => null,
        'smsc_id' => null,
        'contact' => null,
        'source' => null,
        'delivered_count' => null,
        'numbers_count' => null,
        'user_id' => null,
        'credits_price' => null,
        'chars' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'contact_id' => 'contactId',
        'session_id' => 'sessionId',
        'receiver' => 'receiver',
        'message_time' => 'messageTime',
        'status' => 'status',
        'avatar' => 'avatar',
        'text' => 'text',
        'deleted' => 'deleted',
        'charset' => 'charset',
        'charset_label' => 'charsetLabel',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'country' => 'country',
        'sender' => 'sender',
        'phone' => 'phone',
        'price' => 'price',
        'parts_count' => 'partsCount',
        'from_email' => 'fromEmail',
        'from_number' => 'fromNumber',
        'smsc_id' => 'smscId',
        'contact' => 'contact',
        'source' => 'source',
        'delivered_count' => 'deliveredCount',
        'numbers_count' => 'numbersCount',
        'user_id' => 'userId',
        'credits_price' => 'creditsPrice',
        'chars' => 'chars'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'contact_id' => 'setContactId',
        'session_id' => 'setSessionId',
        'receiver' => 'setReceiver',
        'message_time' => 'setMessageTime',
        'status' => 'setStatus',
        'avatar' => 'setAvatar',
        'text' => 'setText',
        'deleted' => 'setDeleted',
        'charset' => 'setCharset',
        'charset_label' => 'setCharsetLabel',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'country' => 'setCountry',
        'sender' => 'setSender',
        'phone' => 'setPhone',
        'price' => 'setPrice',
        'parts_count' => 'setPartsCount',
        'from_email' => 'setFromEmail',
        'from_number' => 'setFromNumber',
        'smsc_id' => 'setSmscId',
        'contact' => 'setContact',
        'source' => 'setSource',
        'delivered_count' => 'setDeliveredCount',
        'numbers_count' => 'setNumbersCount',
        'user_id' => 'setUserId',
        'credits_price' => 'setCreditsPrice',
        'chars' => 'setChars'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'contact_id' => 'getContactId',
        'session_id' => 'getSessionId',
        'receiver' => 'getReceiver',
        'message_time' => 'getMessageTime',
        'status' => 'getStatus',
        'avatar' => 'getAvatar',
        'text' => 'getText',
        'deleted' => 'getDeleted',
        'charset' => 'getCharset',
        'charset_label' => 'getCharsetLabel',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'country' => 'getCountry',
        'sender' => 'getSender',
        'phone' => 'getPhone',
        'price' => 'getPrice',
        'parts_count' => 'getPartsCount',
        'from_email' => 'getFromEmail',
        'from_number' => 'getFromNumber',
        'smsc_id' => 'getSmscId',
        'contact' => 'getContact',
        'source' => 'getSource',
        'delivered_count' => 'getDeliveredCount',
        'numbers_count' => 'getNumbersCount',
        'user_id' => 'getUserId',
        'credits_price' => 'getCreditsPrice',
        'chars' => 'getChars'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_Q = 'q';
    const STATUS_S = 's';
    const STATUS_E = 'e';
    const STATUS_R = 'r';
    const STATUS_A = 'a';
    const STATUS_D = 'd';
    const STATUS_B = 'b';
    const STATUS_F = 'f';
    const STATUS_U = 'u';
    const STATUS_J = 'j';
    const STATUS_I = 'i';
    const STATUS_P = 'p';
    const STATUS_H = 'h';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_Q,
            self::STATUS_S,
            self::STATUS_E,
            self::STATUS_R,
            self::STATUS_A,
            self::STATUS_D,
            self::STATUS_B,
            self::STATUS_F,
            self::STATUS_U,
            self::STATUS_J,
            self::STATUS_I,
            self::STATUS_P,
            self::STATUS_H,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['contact_id'] = isset($data['contact_id']) ? $data['contact_id'] : null;
        $this->container['session_id'] = isset($data['session_id']) ? $data['session_id'] : null;
        $this->container['receiver'] = isset($data['receiver']) ? $data['receiver'] : null;
        $this->container['message_time'] = isset($data['message_time']) ? $data['message_time'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['avatar'] = isset($data['avatar']) ? $data['avatar'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['deleted'] = isset($data['deleted']) ? $data['deleted'] : null;
        $this->container['charset'] = isset($data['charset']) ? $data['charset'] : null;
        $this->container['charset_label'] = isset($data['charset_label']) ? $data['charset_label'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['sender'] = isset($data['sender']) ? $data['sender'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['parts_count'] = isset($data['parts_count']) ? $data['parts_count'] : null;
        $this->container['from_email'] = isset($data['from_email']) ? $data['from_email'] : null;
        $this->container['from_number'] = isset($data['from_number']) ? $data['from_number'] : null;
        $this->container['smsc_id'] = isset($data['smsc_id']) ? $data['smsc_id'] : null;
        $this->container['contact'] = isset($data['contact']) ? $data['contact'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['delivered_count'] = isset($data['delivered_count']) ? $data['delivered_count'] : null;
        $this->container['numbers_count'] = isset($data['numbers_count']) ? $data['numbers_count'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['credits_price'] = isset($data['credits_price']) ? $data['credits_price'] : null;
        $this->container['chars'] = isset($data['chars']) ? $data['chars'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['contact_id'] === null) {
            $invalidProperties[] = "'contact_id' can't be null";
        }
        if ($this->container['session_id'] === null) {
            $invalidProperties[] = "'session_id' can't be null";
        }
        if ($this->container['message_time'] === null) {
            $invalidProperties[] = "'message_time' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['avatar'] === null) {
            $invalidProperties[] = "'avatar' can't be null";
        }
        if ($this->container['text'] === null) {
            $invalidProperties[] = "'text' can't be null";
        }
        if ($this->container['charset'] === null) {
            $invalidProperties[] = "'charset' can't be null";
        }
        if ($this->container['charset_label'] === null) {
            $invalidProperties[] = "'charset_label' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['country'] === null) {
            $invalidProperties[] = "'country' can't be null";
        }
        if ($this->container['parts_count'] === null) {
            $invalidProperties[] = "'parts_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets contact_id
     *
     * @return int
     */
    public function getContactId()
    {
        return $this->container['contact_id'];
    }

    /**
     * Sets contact_id
     *
     * @param int $contact_id contact_id
     *
     * @return $this
     */
    public function setContactId($contact_id)
    {
        $this->container['contact_id'] = $contact_id;

        return $this;
    }

    /**
     * Gets session_id
     *
     * @return int
     */
    public function getSessionId()
    {
        return $this->container['session_id'];
    }

    /**
     * Sets session_id
     *
     * @param int $session_id session_id
     *
     * @return $this
     */
    public function setSessionId($session_id)
    {
        $this->container['session_id'] = $session_id;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return string
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param string $receiver receiver
     *
     * @return $this
     */
    public function setReceiver($receiver)
    {
        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets message_time
     *
     * @return \DateTime
     */
    public function getMessageTime()
    {
        return $this->container['message_time'];
    }

    /**
     * Sets message_time
     *
     * @param \DateTime $message_time message_time
     *
     * @return $this
     */
    public function setMessageTime($message_time)
    {
        $this->container['message_time'] = $message_time;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status q - queued s - scheduled queue e - sending error r - enroute a - acked d - delivered b - buffered f - failed u - unknown j - rejected i - bulk insert p - scheduled suspend h - queue suspend
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string $avatar avatar
     *
     * @return $this
     */
    public function setAvatar($avatar)
    {
        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return bool
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param bool $deleted deleted
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets charset
     *
     * @return string
     */
    public function getCharset()
    {
        return $this->container['charset'];
    }

    /**
     * Sets charset
     *
     * @param string $charset charset
     *
     * @return $this
     */
    public function setCharset($charset)
    {
        $this->container['charset'] = $charset;

        return $this;
    }

    /**
     * Gets charset_label
     *
     * @return string
     */
    public function getCharsetLabel()
    {
        return $this->container['charset_label'];
    }

    /**
     * Sets charset_label
     *
     * @param string $charset_label charset_label
     *
     * @return $this
     */
    public function setCharsetLabel($charset_label)
    {
        $this->container['charset_label'] = $charset_label;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets sender
     *
     * @return string
     */
    public function getSender()
    {
        return $this->container['sender'];
    }

    /**
     * Sets sender
     *
     * @param string $sender sender
     *
     * @return $this
     */
    public function setSender($sender)
    {
        $this->container['sender'] = $sender;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone phone
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price price
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets parts_count
     *
     * @return int
     */
    public function getPartsCount()
    {
        return $this->container['parts_count'];
    }

    /**
     * Sets parts_count
     *
     * @param int $parts_count parts_count
     *
     * @return $this
     */
    public function setPartsCount($parts_count)
    {
        $this->container['parts_count'] = $parts_count;

        return $this;
    }

    /**
     * Gets from_email
     *
     * @return string
     */
    public function getFromEmail()
    {
        return $this->container['from_email'];
    }

    /**
     * Sets from_email
     *
     * @param string $from_email from_email
     *
     * @return $this
     */
    public function setFromEmail($from_email)
    {
        $this->container['from_email'] = $from_email;

        return $this;
    }

    /**
     * Gets from_number
     *
     * @return string
     */
    public function getFromNumber()
    {
        return $this->container['from_number'];
    }

    /**
     * Sets from_number
     *
     * @param string $from_number from_number
     *
     * @return $this
     */
    public function setFromNumber($from_number)
    {
        $this->container['from_number'] = $from_number;

        return $this;
    }

    /**
     * Gets smsc_id
     *
     * @return string
     */
    public function getSmscId()
    {
        return $this->container['smsc_id'];
    }

    /**
     * Sets smsc_id
     *
     * @param string $smsc_id smsc_id
     *
     * @return $this
     */
    public function setSmscId($smsc_id)
    {
        $this->container['smsc_id'] = $smsc_id;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string $contact contact
     *
     * @return $this
     */
    public function setContact($contact)
    {
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets delivered_count
     *
     * @return int
     */
    public function getDeliveredCount()
    {
        return $this->container['delivered_count'];
    }

    /**
     * Sets delivered_count
     *
     * @param int $delivered_count delivered_count
     *
     * @return $this
     */
    public function setDeliveredCount($delivered_count)
    {
        $this->container['delivered_count'] = $delivered_count;

        return $this;
    }

    /**
     * Gets numbers_count
     *
     * @return int
     */
    public function getNumbersCount()
    {
        return $this->container['numbers_count'];
    }

    /**
     * Sets numbers_count
     *
     * @param int $numbers_count numbers_count
     *
     * @return $this
     */
    public function setNumbersCount($numbers_count)
    {
        $this->container['numbers_count'] = $numbers_count;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id user_id
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets credits_price
     *
     * @return string
     */
    public function getCreditsPrice()
    {
        return $this->container['credits_price'];
    }

    /**
     * Sets credits_price
     *
     * @param string $credits_price credits_price
     *
     * @return $this
     */
    public function setCreditsPrice($credits_price)
    {
        $this->container['credits_price'] = $credits_price;

        return $this;
    }

    /**
     * Gets chars
     *
     * @return int
     */
    public function getChars()
    {
        return $this->container['chars'];
    }

    /**
     * Sets chars
     *
     * @param int $chars chars
     *
     * @return $this
     */
    public function setChars($chars)
    {
        $this->container['chars'] = $chars;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


